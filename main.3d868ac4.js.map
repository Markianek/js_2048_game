{"version":3,"sources":["scripts/main.js"],"names":["FIELD_SIZE","SCORE_TO_WIN","gameBoard","document","querySelector","button","gameScore","messageToStart","messageToWin","messageToLose","score","gameField","Array","from","length","fill","start","innerText","addRandomNumber","isEmptyCell","r","includes","isAvaibleMoves","c","updateCells","x","y","rows","cells","className","classList","add","textContent","isWin","remove","randomNum","Math","random","floor","some","arr","cell","move","row","rowWithoutZeros","filter","el","i","isFinite","push","moveUp","moveDown","reverse","moveLeft","moveRight","hasChanged","fieldCurent","fieldWithChange","addEventListener","contains","e","copyField","map","slice","preventDefault","code"],"mappings":"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","file":"main.3d868ac4.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst FIELD_SIZE = 4;\nconst SCORE_TO_WIN = 2048;\n\nconst gameBoard = document.querySelector('.game-field');\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst messageToStart = document.querySelector('.message-start');\nconst messageToWin = document.querySelector('.message-win');\nconst messageToLose = document.querySelector('.message-lose');\n\nlet score = 0;\nlet gameField = Array.from({ length: FIELD_SIZE }, () =>\n  Array(FIELD_SIZE).fill(0)\n);\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageToStart.classList.add('hidden');\n\n    start();\n  } else {\n    start();\n\n    messageToLose.classList.add('hidden');\n    messageToWin.classList.add('hidden');\n  }\n});\n\nfunction start() {\n  gameField = Array.from({ length: FIELD_SIZE }, () =>\n    Array(FIELD_SIZE).fill(0)\n  );\n  score = 0;\n  gameScore.innerText = score;\n  addRandomNumber();\n  addRandomNumber();\n};\n\nfunction isEmptyCell() {\n  for (let r = 0; r < FIELD_SIZE; r++) {\n    if (gameField[r].includes(0)) {\n      return true;\n    };\n  }\n\n  return false;\n}\n\nfunction isAvaibleMoves() {\n  if (isEmptyCell()) {\n    return true;\n  }\n\n  for (let r = 0; r < FIELD_SIZE; r++) {\n    for (let c = 0; c < FIELD_SIZE - 1; c++) {\n      if (gameField[r][c] === gameField[r][c + 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let r = 0; r < FIELD_SIZE - 1; r++) {\n    for (let c = 0; c < FIELD_SIZE; c++) {\n      if (gameField[r][c] === gameField[r + 1][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction updateCells() {\n  for (let x = 0; x < FIELD_SIZE; x++) {\n    for (let y = 0; y < FIELD_SIZE; y++) {\n      gameBoard.rows[x].cells[y].className = '';\n      gameBoard.rows[x].cells[y].classList.add(`field-cell`);\n\n      gameBoard\n        .rows[x]\n        .cells[y]\n        .classList.add(`field-cell--${gameField[x][y]}`);\n      gameBoard.rows[x].cells[y].textContent = gameField[x][y] || '';\n    }\n  }\n\n  isWin();\n\n  gameScore.innerText = score;\n\n  if (!isAvaibleMoves()) {\n    messageToLose.classList.remove('hidden');\n  }\n};\n\nfunction addRandomNumber() {\n  const randomNum = Math.random() < 0.9 ? 2 : 4;\n\n  while (isEmptyCell()) {\n    const r = Math.floor(Math.random() * FIELD_SIZE);\n    const c = Math.floor(Math.random() * FIELD_SIZE);\n\n    if (gameField[r][c] === 0) {\n      gameField[r][c] = randomNum;\n      break;\n    }\n  }\n\n  updateCells();\n}\n\nfunction isWin() {\n  if (gameField.some(arr => arr.some(cell => cell === SCORE_TO_WIN))) {\n    messageToWin.classList.remove('hidden');\n  }\n\n  return false;\n}\n\nfunction move(row) {\n  let rowWithoutZeros = row.filter(el => el !== 0);\n\n  for (let i = 0; i < FIELD_SIZE - 1; i++) {\n    if (rowWithoutZeros[i] === rowWithoutZeros[i + 1]\n      && isFinite(rowWithoutZeros[i])) {\n      rowWithoutZeros[i] *= 2;\n      rowWithoutZeros[i + 1] = 0;\n      score += rowWithoutZeros[i];\n    }\n  }\n\n  rowWithoutZeros = rowWithoutZeros.filter(el => el !== 0);\n\n  while (rowWithoutZeros.length < FIELD_SIZE) {\n    rowWithoutZeros.push(0);\n  }\n\n  return rowWithoutZeros;\n}\n\nfunction moveUp() {\n  for (let c = 0; c < FIELD_SIZE; c++) {\n    let row = [\n      gameField[0][c],\n      gameField[1][c],\n      gameField[2][c],\n      gameField[3][c],\n    ];\n\n    row = move(row);\n\n    for (let r = 0; r < FIELD_SIZE; r++) {\n      gameField[r][c] = row[r];\n    }\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < FIELD_SIZE; c++) {\n    let row = [\n      gameField[0][c],\n      gameField[1][c],\n      gameField[2][c],\n      gameField[3][c],\n    ];\n\n    row = row.reverse();\n\n    row = move(row);\n\n    row = row.reverse();\n\n    for (let r = 0; r < FIELD_SIZE; r++) {\n      gameField[r][c] = row[r];\n    }\n  }\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < FIELD_SIZE; r++) {\n    let row = gameField[r];\n\n    row = move(row);\n\n    gameField[r] = row;\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < FIELD_SIZE; r++) {\n    let row = gameField[r];\n\n    row = row.reverse();\n\n    row = move(row);\n\n    row = row.reverse();\n\n    gameField[r] = row;\n  }\n}\n\nfunction hasChanged(fieldCurent, fieldWithChange) {\n  for (let r = 0; r < FIELD_SIZE; r++) {\n    for (let c = 0; c < FIELD_SIZE; c++) {\n      if (fieldCurent[r][c] !== fieldWithChange[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\ndocument.addEventListener('keydown', e => {\n  const copyField = gameField.map(arr => arr.slice());\n\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n  }\n\n  if (hasChanged(gameField, copyField)) {\n    addRandomNumber();\n  }\n\n  updateCells();\n});\n"]}